{
  "name": "AI Meeting Scheduler",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {},
        "options": {
          "downloadAttachments": false
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        180,
        180
      ],
      "id": "60033d33-2657-461d-932c-446420269eb2",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "XAqZEokMiDlmsuDp",
          "name": "Marteen "
        }
      }
    },
    {
      "parameters": {
        "model": "sonar-pro",
        "messages": {
          "message": [
            {
              "content": "=You are a calendar assistant. Extract the intent, meeting title, attendees (with emails), proposed datetime (including phrases like 'coming Saturday'), and duration from the following email. If date/time is missing, return 'unspecified'.\n{{ $json.text }}\n\nAlway print the output in JSON Format only. without any unwanted symbols.",
              "role": "system"
            },
            {
              "content": "=// Get the Perplexity message\nconst message = $json[\"message\"] || \"\";\n\n// 1. Check for meeting intent (case-insensitive)\nconst isMeetingRequest = message.toLowerCase().includes(\"schedule a meeting\");\n\n// 2. Extract the resolved date (e.g., 'July 5, 2025') from the line mentioning next Saturday\nlet resolvedDate = null;\nconst resolvedDateMatch = message.match(/the next Saturday is ([A-Za-z]+ \\d{1,2}, \\d{4})/);\nif (resolvedDateMatch) {\n  resolvedDate = resolvedDateMatch[1]; // e.g., \"July 5, 2025\"\n}\n\n// 3. Set default time to 10:00 if time is unspecified\nlet timeStr = \"10:00\";\n\n// 4. Combine date and time, parse to JS Date object\nlet startDateTime = null;\nif (resolvedDate) {\n  // Format: \"July 5, 2025 10:00\"\n  const dateObj = new Date(`${resolvedDate} ${timeStr}`);\n  if (!isNaN(dateObj)) {\n    // Format as ISO string for Google Calendar, with IST offset\n    // This will give you something like \"2025-07-05T10:00:00.000Z\"\n    // If you want IST (+05:30), add the offset manually:\n    const isoString = dateObj.toISOString().replace('Z', '+05:30');\n    startDateTime = isoString;\n  }\n}\n\n// 5. Return for n8n\nreturn [\n  {\n    json: {\n      isMeetingRequest,\n      startDateTime\n    }\n  }\n];\n\n{{ $json.subject }}\n{{ $json.from.value[0].address }}\n{{ $json.textAsHtml }}\n{{ $json.from.value[0].name }}\n{{ $json.textAsHtml }}\n{{ $json.to.text }}"
            }
          ]
        },
        "simplify": true,
        "options": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.perplexity",
      "typeVersion": 1,
      "position": [
        360,
        180
      ],
      "id": "b26a595c-a0f6-436b-9525-6759e7e03a0b",
      "name": "Perplexity",
      "credentials": {
        "perplexityApi": {
          "id": "D2gfxXZp33i26cqB",
          "name": "Perplexity account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse the Perplexity output (assume it's in $json[\"message\"] as a JSON string)\nlet data;\ntry {\n  data = typeof $json[\"message\"] === \"string\" ? JSON.parse($json[\"message\"]) : $json[\"message\"];\n} catch (e) {\n  data = {};\n}\n\n// Improved intent detection: robustly detect if this is a meeting request\nlet message = (data.intent || \"\").toLowerCase().replace(/\\s+/g, ' ');\n// Will be true if the intent contains both 'meeting' and 'request' OR 'schedule' and 'meeting'\nlet isMeetingRequest =\n  (message.includes('meeting') && message.includes('request')) ||\n  /schedule[\\s\\S]{0,50}meeting/i.test(message);\n\n// Always use proposed_datetime if present\nlet startDateTime = null;\nif (data.proposed_datetime) {\n  let dateObj = new Date(data.proposed_datetime);\n  if (!isNaN(dateObj)) {\n    startDateTime = dateObj.toISOString();\n  }\n} else {\n  // Fallback to previous logic if proposed_datetime not present\n  let dateStr = data.proposed_date || null; // e.g., \"Saturday, July 5, 2025\" or \"2025-07-05\"\n  let timeStr = data.proposed_time || \"10:00\"; // Default to 10:00 if unspecified\n\n  if (dateStr) {\n    let parsedDateStr = dateStr;\n    if (dateStr.includes(',')) {\n      const dateParts = dateStr.split(\",\");\n      if (dateParts.length === 3) {\n        parsedDateStr = dateParts[1].trim() + \", \" + dateParts[2].trim();\n      } else if (dateParts.length === 2) {\n        parsedDateStr = dateParts[1].trim();\n      }\n    }\n    let dateObj;\n    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(parsedDateStr)) {\n      dateObj = new Date(`${parsedDateStr}T${timeStr}:00+05:30`);\n    } else {\n      dateObj = new Date(`${parsedDateStr} ${timeStr} GMT+05:30`);\n    }\n    if (!isNaN(dateObj)) {\n      startDateTime = dateObj.toISOString();\n    }\n  }\n}\n\n// Extract attendees array (names and emails)\nconst attendees = Array.isArray(data.attendees)\n  ? data.attendees.map(a => ({\n      name: a.name || \"\",\n      email: a.email || \"\"\n    }))\n  : [];\n\n// Return everything for use in later nodes\nreturn [\n  {\n    json: {\n      isMeetingRequest,\n      startDateTime,\n      attendees\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        180
      ],
      "id": "b32dc7c6-b4d5-4738-b77e-157dfb8e407a",
      "name": "Code1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7220a9b0-6072-4bd2-9950-cc7a0a9ce0c5",
              "leftValue": "={{ $json.isMeetingRequest }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        800,
        180
      ],
      "id": "bbde0baa-4664-44f6-8a5d-41a9f88cf3de",
      "name": "If"
    },
    {
      "parameters": {
        "sendTo": "={{$json[\"attendees\"][0][\"email\"]}}",
        "subject": "=Re: {{$json[\"meeting_title\"]}}",
        "message": "=Hello {{$json[\"attendees\"][0][\"name\"]}}, thank you for your message.",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1020,
        260
      ],
      "id": "96cb9707-3c3f-41d5-96db-617b39b5a6da",
      "name": "Gmail1",
      "webhookId": "5e97b94f-b137-460b-898d-4cb6640b37bb",
      "credentials": {
        "gmailOAuth2": {
          "id": "XAqZEokMiDlmsuDp",
          "name": "Marteen "
        }
      }
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "marteen837@gmail.com",
          "mode": "list",
          "cachedResultName": "marteen837@gmail.com"
        },
        "timeMin": "={{ $json.startDateTime }}",
        "timeMax": "={{ $json.endDateTime }}",
        "options": {
          "outputFormat": "availability"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        1220,
        60
      ],
      "id": "0e4c77ea-f9e1-4ef6-a996-2e8ad3d3a4bc",
      "name": "Google Calendar1",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "BLZlgDn8SZSjCCsj",
          "name": "Google Calendar account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Example: startDateTime is \"2025-07-05T10:00:00+05:30\"\n// Calculate endDateTime (1 hour later)\nconst startDateTime = $json[\"startDateTime\"]; // e.g., \"2025-07-05T10:00:00+05:30\"\nlet endDateTime = null;\nif (startDateTime) {\n  endDateTime = new Date(new Date(startDateTime).getTime() + 60*60*1000).toISOString();\n}\nreturn [{ json: { startDateTime, endDateTime } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        60
      ],
      "id": "bb977434-ab80-4bb3-9e59-121073f5998c",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b64e46ba-642d-485c-9915-10fcee672691",
              "leftValue": "={{ $json.available }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1420,
        60
      ],
      "id": "8af361a4-659a-44ca-8676-0127619e0848",
      "name": "If1"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "marteen837@gmail.com",
          "mode": "list",
          "cachedResultName": "marteen837@gmail.com"
        },
        "start": "={{ $('Code').item.json.startDateTime }}",
        "end": "={{ $('Code').item.json.endDateTime }}",
        "additionalFields": {
          "attendees": [
            "={{ $('Gmail Trigger').item.json.from.value[0].address }}, {{ $('Gmail Trigger').item.json.to.value[0].address }}"
          ],
          "summary": "Invoice_Automation Project Discussion "
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        1640,
        -32.598516067078116
      ],
      "id": "7cf6dc17-a231-4371-adf8-5a336774d2fc",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "BLZlgDn8SZSjCCsj",
          "name": "Google Calendar account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "sonar-pro",
        "messages": {
          "message": [
            {
              "content": "=You are an expert executive assistant. Your job is to read incoming professional emails and extract structured information for scheduling, replying, or summarizing. Always respond in clear, concise, and professional language.\n",
              "role": "system"
            },
            {
              "content": "=Here is an email I received. Please parse it and extract:\n- The sender's name and email: {{ $('Gmail Trigger').item.json.to.value[0].name }} and {{ $('Gmail Trigger').item.json.to.value[0].address }}\n- The recipient's name and email: {{ $('Gmail Trigger').item.json.from.value[0].name }} and {{ $('Gmail Trigger').item.json.from.value[0].address }}\n- The main intent (e.g., meeting request, information, complaint, etc.)\n- The proposed date and time (if any): {{ $json.start.dateTime }}\n- Any action items or follow-up needed: {{ $json.reminders.useDefault }}\n\nEmail:\nSubject: Request for a meeting\n\nHi John,\n\nCould we schedule a meeting to discuss the Q3 report? I am available next Tuesday at 2 PM. Let me know if that works for you.\n\nBest,\nJane Doe\njane.doe@example.com\n"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.perplexity",
      "typeVersion": 1,
      "position": [
        1840,
        -40
      ],
      "id": "fdf5ed45-1692-4185-ab3b-8e9eb3123c0b",
      "name": "Perplexity1",
      "credentials": {
        "perplexityApi": {
          "id": "D2gfxXZp33i26cqB",
          "name": "Perplexity account"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "={{ $('Gmail Trigger').item.json.from.value[0].address }}",
        "subject": "=Approval Needed: Meeting Request from {{ $json[\"sender\"][\"name\"] }}",
        "message": "={{ $('Perplexity1').item.json.choices[0].message.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2040,
        -40
      ],
      "id": "3f671f2e-9bd4-449c-a415-6eb1a6ea1961",
      "name": "Gmail2",
      "webhookId": "027d1020-2451-4003-a328-008075edd63a",
      "credentials": {
        "gmailOAuth2": {
          "id": "XAqZEokMiDlmsuDp",
          "name": "Marteen "
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $('Gmail Trigger').item.json.from.value[0].address }}",
        "subject": "=Meeting Confirmation:",
        "emailType": "text",
        "message": "={{ $json.choices[0].message.content }}",
        "options": {
          "replyToSenderOnly": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2440,
        -40
      ],
      "id": "18eaa3d0-f93f-43a7-8e80-429bc3c5b85c",
      "name": "Gmail3",
      "webhookId": "9b613bab-d4b1-4e3f-927b-1d2d496caeae",
      "credentials": {
        "gmailOAuth2": {
          "id": "XAqZEokMiDlmsuDp",
          "name": "Marteen "
        }
      }
    },
    {
      "parameters": {
        "model": "sonar-pro",
        "messages": {
          "message": [
            {
              "content": "=Dear {{ $('Gmail Trigger').item.json.from.value[0].name }},\n\nI am writing to confirm that your meeting, **{{ $('Google Calendar').item.json.summary }}**, has been scheduled.\n\n**Details:**  \n- **Date & Time:**  {{ $('Google Calendar').item.json.start.dateTime }}\n- **Duration:** 1 hour  \n- **Attendees:** \n  {{ $('Google Calendar').item.json.attendees.map(a => a.email === $('Google Calendar').item.json.organizer.email ? null : (a.displayName || a.email)).filter(Boolean).join(', ') }}\n\nIf you have any questions or concerns regarding this meeting, please let me know.\n\nBest regards,  \n{{ $('Google Calendar').item.json.organizer.displayName || $('Google Calendar').item.json.organizer.email.split('@')[0] }}\n\nDon't write any unnessesary informatiom in the body of the mail. Maintain Proper structure to the  mail body. \n\n\n"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.perplexity",
      "typeVersion": 1,
      "position": [
        2260,
        -40
      ],
      "id": "8567c293-be76-4b6a-9906-4722c2dbabb4",
      "name": "Perplexity2",
      "credentials": {
        "perplexityApi": {
          "id": "D2gfxXZp33i26cqB",
          "name": "Perplexity account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Perplexity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google Calendar1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "main": [
        [
          {
            "node": "Perplexity1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity1": {
      "main": [
        [
          {
            "node": "Gmail2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail2": {
      "main": [
        [
          {
            "node": "Perplexity2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity2": {
      "main": [
        [
          {
            "node": "Gmail3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "timezone": "Asia/Kolkata"
  },
  "versionId": "d7088234-5ce3-4e1b-904f-a1b446149f6a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6265d1dec299b38efff86cb215e226f0abea160c6c5153bfa99894e4b3fbf37f"
  },
  "id": "TIHzKyMc19JWSz30",
  "tags": []
}